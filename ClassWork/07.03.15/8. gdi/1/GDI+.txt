






                                                      Введение


GDI+ - библиотека классов, предосталвляющая средства для обработки двумерной графики, изображения и решения типографической задачи.
GDI+ является обёрткой для GDI. GDI+ появилась с выходом Windows XP.
GDI(Crafics Device Interface) - это интерфейс windows для представления графических объектов и передачи их на устройство отображения. Он отвечает за отрисовку
линий, кривых, отображение шрифтов и оработку полей. Но он не отвечает за отрисовку окон. Поволяет абстрагироватся от конкретных физических устройств отображения.
Windows-приложение обращается к функциям GDI, а он транслирует обращения к драйверам устройств, обеспечивая аппаратную независимость.
Взаимодействие приложения с GDI осуществляется с помощью контекста устройства. Это внутренняя структура для управления информацией об устрйстве выводе.
Она определяет набор графических объектов и атрибутов, которые используются для вывода графики. Приложение направляет вывод в контекстное устройство, а затем
windows на конкретное аппаратное устройство. Основные графические объекты:
1) Перо - рисование линий;
2) Brush - заливка;
3) Bitmap - изображения;
4) Rectangle - прямоугольник;
5) Ellipse - элипс;
6) Gradient - градиент;
7) Palet - палитра цветов;
8) Font - шрифт;
10) Region - отсечение области вывода;
11) Line - линия.

GDI+ является улучшенной средой для 2D-графики, в котором добавлены новые возможности: 
1) Сглаживание линий; 
2) Использование координат с плавающей точкой; 
3) Градиентная заливка;
4) Внутренняя поддержка форматов JPEG/PNG;
5) Улучшенная поддержка регионов отсеченя;
6) Возможность использования трансформации.
В GDI+ используется aRGB-канал, в котором 'a' означает непрозрачность. Интерфейс, управляемый классом GDI+, является частью .Net платформы.
Пространство имён GDI+:
1) System.Drawing - содержит большинство классов, структур, перечислений и делегатов, обеспечивающих базовую функциональность рисования;
2) System.Drawing2D - сглаживание, трансформации;
3) System.Drawing.Imaging - графические изображения;
4) System.Drawing.Printing - для вывода графики на принтер;
5)  System.Drawing.Text - шрифты.

Графические примитивы в GDI+:
1) Класс Pen(перо);
2) Класс Brush(заливка) - кисти;
3) Класс Font(шрифт) - фомат текста, включая начертания шрифта, его размера и стиль;
4) Класс Image - базовый для обоих, Bitmap - растровая графика, Metafile - векторная графика;
5) Класс GraphicsPath - контур или пути. Последовательность, соединенных прмых и кривых;
6) Класс Region(область) - сожная графическая форма, которая состоит из прямоугольником и путей.

Система координат. В GDI+ существует 3 типа координат систем:
1) Координаты устройства - система координат, используемая физическим устройством, на котором производится рисование;
2) Страничные координаты - система координат, представляющие собой смещение центра координат;
3) Мировые координаты - представляют абстракцию размеров от единиц измерения. По умолчанию, единица измерения - пиксель. Но в мир. координатах можно 
назначить другую единицу измерения. В GDI+ все методы принимают мировые координаты. За кулисами, мировые координаты автоматичеки преобразуются в страничные,
а затем страничные автоматически преобразуются в координаты устройства.


В GDI+ в контекст устройства помещен в оболочку класса Graphics и большая часть рисования выполняется вызовом методов этого класса.
У класса Graphics нет открытых конструкторов. Этот объект можно получить несколькими способами:
1) Переопределяя метод OnPaint для окна или элемента управления, на котором хотим рисовать. 
   protected override void OnPaint(PaintEventArgs e){Graphics g = e.Graphics};
2) Подписавшись на событие. void Form_Paint(Object sender, PaintEventArgs pea){Graphics g = e.Graphics};
3) Путем вызова метода CreateGraphics, определённом в классе Control. Graphics g = this.CreateGraphics();g.Dispose();










                                                                        Структура Color


Предоставляет цвета RGB. Для создания используются статические методы:
1) FromArgb;
2) FromName - по имени цвета.

Свойства:
1) A, R, G, B - возвращают отдельный канал цвета;

Кроме того, в ней есть статические свойства, которые возвращают объект Color, предоставляющий отдельный системой цвет.


           


                                                                      Структуры Size и SizeF


Содержат ширину и высоту.

Струтуры Point и PointF представляют пару координат X и Y на двумерной плоскости.
Rectangle и RectangleF содержат набор из 4 чисел, определяющих координаты левого верхнего угла и правого нижнего угла.



Кисть представлена абстрактным классом Brush. Его потомки представляют конкретные типы кистей
Кисти:
1) System.Drawing.SolidBrush - сплошная кисть;
2) System.Drawing.TextureBrush - текстурная кисть. Использует изображение для заливки внутренней части формы;
3) System.Drawing.Drawing2D.LinearGradientBrush - линейный градиент. LinearColors - массив из 2 структур, представляющие начальный и конечный цвет градиента.
4) PathGradientBrush - заполняет градиентом внутреннюю область фигуры;
5) System.Drawing.Drawing2D.HatchBrush - штриховка.



Класс Brushes содержит набор статических свойств, который возвращает объект Brush.


Класс Pen определяет перо или карандаш дя рисования прямых и кривых.
Свойства:
1) DashPattern - настраивает массив штрихов и промежутков;
2) DashCap - задаёт стиль окончания пунктира;
3) StartCap и EndCap - стиль начала и конца линии;
4) LineJoin - стиль объединения двх линий.



Класс Pens содержит набор статических свойств, которые возвращают объект Pen толщиной в 1 пиксель и с установленными цветами.










                                                                         Изображения


Для работы с изображениями в пространстве имен System.Drawing предусмотрен класс Image. Он является абстрактным базовым классом и содержит методы для работы
с изображениями. От него наследуются 2 класса: Bitmap - растровые и Metafile - векторные.

RawFormat - Получает формат файла объекта Image.
HorizontalResolution - Получает горизонтальное разрешение объекта Image в пикселях на дюйм.
VerticalResolution - Получает вертикальное разрешение объекта Image в пикселях на дюйм.


FromFile(String) - Создает объект Image из указанного файла.
FromStream(Stream) - Создает объект Image из указанного потока данных.
Save(String) - Сохраняет объект Image в указанный файл или поток.
RotateFlip - Поворачивает, зеркально отражает, либо поворачивает и зеркально отражает объект Image.



Класс Bitmap

FromResource - Создает изображение Bitmap из указанного ресурса Windows.
FromHicon - Создает изображение Bitmap для значка из дескриптора Windows.
GetPixel - Получает цвет указанного пикселя в этом изображении Bitmap.
SetPixel - Задает цвет указанного пикселя в этом изображении Bitmap.
SetResolution - Устанавливает разрешение для этого изображения Bitmap.



Класс Metafile предоставляет векторные изображения. Он может работать с WMF-, EMF-файлами. Метафайл состоит из последовательности вызовов графических функций,
которые рисуют линии, кривые, закрашиваемые фигуры и текст. 

GetMetafileHeader() - Возвращает коллекцию MetafileHeader, связанную с этим объектом Metafile.
PlayRecord - Воспроизводит отдельную запись метафайла.











                                                                          Работа с шрифтами



Шрифт - система визуального отображения информации. характеристики:
1) Гарнитура - набор шрифтов одиннакового рисунка различного начертания и размера;
2) Начертания - насыщенность и толщина знаков(жирный, полужирный, нормальный);
3) Размер шрифта;
4) Наклон.
Шрифт - файл или группа файлов, обеспечивающих группу текста. 
Они могут быть растровыми или векторными. В Windows 3.1 появилась технология шрифтов "true Type".
В Windows 98 вышел формат шрифтов "Open Type". В WinForms можно получить к обоим технологиям.
В WinForms для работы со шрифтами используются классы Font и FontFamily, определяет семейство шрифтов.



FontFamily свойства:
1) Families - возвращает массив объектов шрифтов;
2) Name - имя текущего семейтва шрифтов.





Класс Font - определяет конкретный шрифт, включая его начертания, размер и шрифт.
1) FontFamily - Возвращает семейство шрифтов для данного шрифта;
2) Italic - является ли шрифт курсивным;
3) Underline - подчеркнутый шрифт;
4) Size - размер шрифта;
5) Unit - единица измерения;
6) Height - межстрочный интервал.

Конструктор:

public Font(
	string familyName,//Семейство шрифтов
	float emSize,//размер
	FontStyle style//Жирный или курсивный
)


Font font = new Font("Times New Roman", 12, FondStyle.Bold);








                                                                      

                                                                       Система координат


В GDI+ определяются три разных системы координат, которые используются средой выполнения для определения места размещения графического объекта.
1) Координаты устройства. Координаты(0, 0) находятся в вверхнем левом углу;
2) Страничные координаты представляют смещение центра координат;
3) Мировые координаты позволяют изменять единицы измерения.
По умолчанию, единица измерения - пиксель. А начало координат находится в верхнем левом углу. Установить смещение мжно с помощью метода TranslateTransform.

Graphics g = e.Graphics;
g.TranslateTransform(300, 150);


Для того чтобы в мировых координатах изменить единицу измерения - свойство PageUnit.
g.PageUnit;

Все методы отображения графических примитивов класса Graphics, принимают мировые координаты.


GDI+ после смещения единиц измерения будет преобразовывать все координаты в методы отображения координат устройства. Сначала мировые координаты, 
преобразуется в страничные координаты, которые представляют смещение относительно в применении к мировым координатам.
Тоесть, точка 0, 0 и точка 1, 2 - 5, 3 и 6, 5.

GDI+ преобразует страничные координаты в координаты устройства. Которые предоставляют собой результат применения, страничных координат к мировым.
Тоесть, точка 5,  и точка 6, 5 - 480, 288 и 576, 480. При условии, что устройство изображения содержит 96 точек/дюйм.





Для задания преобразования используется класс Matrix, в котором есть несколько методов, которые формируют матрицу афинных преобразований.
Глобальные применяютс ко все элемента Graphics, а локальные - только к определенному рисуемому элементу. Для создания глобального преобразования нужно
создать матрицу преобразования свойству трансформ Graphics. Также у Graphics есть несколько методов преобразования
(RotateTransform, ScaleTransform, TranslateTransform).
Локальное преобразование содержит метод трасформ, который позволяет выполнить преобразование над кривыми точками.
Преобразования могут быть глобальными и локальными.










                                                                             Контуры(GraphicsPath)



Набор точек, описывающих совокупность прямых. Они могут быть несоединенными или незавсимыми. Набор соединенных и кривых в составе контура - фигурой.
GraphicsPath представляет контур. У Graphics есть метод DrawGraphicsPath на устройстве вывода заданный контур. GraphicsPath содержит набор методов Add
(добавления фигур).








                                                                               Регионы, или области


Это часть зоны, отображаемым устройством вывода. Класс Region. Он часто используется для обрезки некоторой зоны или для прверки попадания в некоторую зону.
Тоесть, можно запретить рисование вне границ определенной области заданной классом региона.

Методы:
1) Union - объединение;
2) Intersect - пересечение;
3) Xor - все, кроме пересечения;
4) Exclude - 1 фигура, которая не входит в другую;
5) Complement - тоже самое, но вторая.










                                                                             Печать на принтере


Печать в GDI+. За это отвечают несколько взаимосвязанных классов. Эти классы объявлены в пространстве имён System.Drawing.Print . 

Класс PrinterSettings - класс, задающий свойства печати документа.

Свойства:
1) PrinterName - получает или задает имя используемого принтера;
2) CanDuplex - поддерживает ли принтер двухстороннюю печать;
3) Duplex - задает параметры двухсторонней печати;
4) Collate - выполняется ли разбор документа по копиям;
5) Copies - получает или задает количество копий документа, которое необходимо вывести на печать;
6) PaperSizes - получает размеры бумаги, поддерживаемые принтером;
7) PrinterResolutions - получает разрешения, поддерживаемые принтером;
8) PrintRange - получает или задает номера страниц, отправленных на печать пользователем;
9) IsValid - аварийная проверка на присутствие принтера(PrinterName);
10) IsDefaultPrinter - является ли принтером по умолчанию;
11) InstalledPrinters - получает названия всех принтеров, установленных на компьютере.



Класс PageSettings - задает параметры одной страницы, выводимой на печать. Он всегда связан с принтером.

Свойства:
1) Bounds - получает размер страницы, принимая во внимание ориентацию страницы, заданную свойством Landscape;
2) Color - определяет необходимость цветной печати;
3) Landscape - определяет альбомную или книжную ориентацию страницы;
4) Margins - поле страницы;
5) PaperSize - размер страницы.



Класс PrintDocument - определяет документ для печати. Если используется стандартное диалоговое окно, то лучше создать 1 объект принт документ, 
сохранить в нем заданные параметры и применять его в течении всего сеанса программы.

Свойства:
1) PrinterSettings - получает или задает принтер, выполняющий печать документа;
2) DocumentName	- получает или задает имя документа, отображаемое во время печати документа;
3) DefaultPageSettings - получает или задает параметры страницы, используемые по умолчанию для всех выводимых на печать страниц.

Метод Print - запускает процесс печати документа.
При выводе на печать каждой страницы происходит событие PrintPage, которое следует обработать для подготовки документа к печати.
Вместе с ним приходит событие PrintPageEventArgs.











                                                                     Собственные элементы управления


В WinForms пользовательский элемент должен быть производным от класса Control прям или косвенно. Существует 3 подхода к разработке:
1) Объединение существующих элементов управления - составной элемент управления. Он наследуется от класса UserControl, который обеспечивает клавиатурную
   маршрутизацию для дочерних элементов и позволяет им работать в группе;
2) Расширенный элемент управления - создаётся путем наследования нового элемента от существующего. Такой подход сохраняет все стандартные функции элемента,
   а затем расширяет их путем добавления пользовательских свойств. В этом случае, можно переопределить логику рисования;
3) Разработка элемента с нуля. В этом случае, элемент можно унаследовать от класса UserControl или Control. В этом случае необходим код для OnPaint.