0. Все реализации должны:
	- быть выполнены с использованием GDI+.NET
	- обладать понятной и красивой архитектурой (классы и их отношения друг к другу)
	- прокомментированы
	- без грамматических ошибок в исходном коде
	- обладать эргономичным интерфейсом (использование чего-либо кроме кнопок и текстовых полей крайне желательно)

1. Реализовать арканоид с несколькими уровнями. (Максимум - 11б)
	- Вести общий счет, кол-во жизней.
	- Уровни должны храниться в файлах.
	- Добавить систему бонусов.(необязательно)
	- Добавить фоновую картинку каждому уровню, которая назначается в файле с уровнем.(необязательно)
	- Изменить форму площадки на полукруг и менять угол отражения от биты. (необязательно)

2. Игра "Змейка". (Максимум - 10б)
	- Реализовать классический вариант змейки.
	- Сделать красивую графику (например разноцветная змейка, анимированные "яблоки", и т.д.).
	- Добавить различные бонусы (сокращение змейки, замедление\ускорение и т.д.). (необязательно)
	- Добавить ведение счета и сохранение в файл Топ 10.

3. Игра "Тетрис". (Максимум - 10б)
	- Классический тетрис.
	- Добавить ускорение.
	- Добавить случайно генерируемые фигуры, вместо стандартных.
	- Добавить ведение счета и сохранение в файл Топ 10.

4. Редактор изображений. (Максимум - 11б).
	- Полностью слизать MS Paint, включая интерфейс и меню.
	- Добавить градиентную заливку. (необязательно)
	- Добавить новые примитивы. (необязательно)

5. Реализовать игру "Herbert". Суть игры в том, что на поле, которое состоит из квадратных ячеек, присутствует робот, конечная позиция и звездочки. Задача робота пройти от своей стартовой позиции до конечной и собрать все звездочки. Робот управляется с помощью небольшой программы, которую должен написать игрок. (Максимум - 12б).

	- Рабочая область окна должна состоять из поля, на котором бегает робот, и встроенного редактора программы робота.
	- Каждый уровень должен храниться как отдельный файл. Желательно, чтобы такой файл было легко модифицировать вручную.
	- Помимо красивой графики и анимации необходимо реализовать интерпретатор языка.
	- Синтаксис языка выдумать свой.
	- Язык должен поддерживать, как минимум, создание целочисленных переменных, простые математические операции, пользовательские процедуры, простые условия, простые циклы.
	- Процесс выполнения программы может быть остановлен в любой момент.
	- Предусмотреть "системные" функции движения робота. Как минимум движение в определенную сторону на одну ячейку.
	- Предусмотреть подсветку синтаксиса во встроенном редакторе. (необязательно)
	- Модернизировать ядро приложения таким образом, чтобы на поле располагались несколько роботов и одной программой можно было контролировать всех роботов. (необязательно)
	- Реализовать встроенный редактор уровней с сохранением в файл. (необязательно)
	- Реализовать способ сохранения статистики по каждому уровню (количество строк кода, количество пройденных ячеек). (необязательно)

	