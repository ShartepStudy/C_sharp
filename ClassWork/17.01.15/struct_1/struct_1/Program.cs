using System;

/*
Структуры используют большую часть того же синтаксиса, что и классы, однако они более ограничены по сравнению с ними.   

• В объявлении структуры поля не могут быть инициализированы за исключением случаев, когда они объявлены как const или static.   

• Структура не может объявлять используемый по умолчанию конструктор (конструктор без параметров).

• Структуры копируются при присваивании. При присваивании структуры к новой переменной выполняется копирование всех данных, а любое изменение новой копии не влияет на данные в исходной копии.
Это важно помнить при работе с коллекциями типов значений, такими как Dictionary<string, myStruct>. 

• Структуры являются Типами Значений, а классы — Ссылочными Типами.   

• В отличие от классов, структуры можно создавать без использования оператора new.   

• Структуры могут объявлять конструкторы, имеющие параметры.  

• Структура не может быть унаследованной от другой структуры или класса и не может быть основой для других классов. 
Все структуры наследуют непосредственно от System.ValueType, который наследует от System.Object. 

• Структуры могут реализовывать интерфейсы.  

• Структуры нельзя создавать внутри методов и интерфейсов.

• Структура может использоваться как тип, допускающий значение NULL, и ей можно назначить значение NULL. 

*/

// http://msdn.microsoft.com/ru-ru/library/saxz13w4.aspx

class Program
{
    static void Main(string[] args)
    {
        Rect r1 = new Rect(10, 10);
        r1.Show();

        Rect r2 = new Rect(10);
        r2.Show();

        Rect r3 = new Rect();
        r3.Show();
    }

    struct Rect
    {
        double width/* = 10*/;
        double height/* = 10*/;

        /*public Rect()
        {
            this.width = 50;
            this.height = 50;
        }*/
        public Rect(int width = 5, int height = 5)
        {
            this.width = width;
            this.height = height;
        }
        public void Show()
        {
            Console.WriteLine(width + "\t" + height + "\t" + Diagonal);
        }
        public double Diagonal
        {
            get
            {
                return Math.Sqrt(Math.Pow(width, 2) + Math.Pow(height, 2));
            }
        }
    }
}